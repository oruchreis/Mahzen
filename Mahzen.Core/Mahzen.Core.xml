<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mahzen.Core</name>
    </assembly>
    <members>
        <member name="T:Mahzen.Core.BinaryWriterHelper">
            <summary>
            BinaryWriter helpers to work with <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="M:Mahzen.Core.BinaryWriterHelper.Write(System.IO.BinaryWriter,Mahzen.Core.MessageProtocolObject[])">
            <summary>
            Writes multiple <see cref="T:Mahzen.Core.MessageProtocolObject"/> to the <paramref name="binaryWriter"/>
            </summary>
            <param name="binaryWriter"></param>
            <param name="datas"></param>
        </member>
        <member name="M:Mahzen.Core.BinaryWriterHelper.Write(System.IO.BinaryWriter,System.Span{Mahzen.Core.MessageProtocolObject})">
            <summary>
            Writes multiple <see cref="T:Mahzen.Core.MessageProtocolObject"/> to the <paramref name="binaryWriter"/>
            </summary>
            <param name="binaryWriter"></param>
            <param name="datas"></param>
        </member>
        <member name="T:Mahzen.Core.Command">
            <summary>
            Represents a command
            </summary>
        </member>
        <member name="P:Mahzen.Core.Command.Keyword">
            <summary>
            Command's unique keyword
            </summary>
        </member>
        <member name="P:Mahzen.Core.Command.Parameters">
            <summary>
            Parameters of the command.
            </summary>
        </member>
        <member name="T:Mahzen.Core.CommandContext">
            <summary>
            Every invoking process of a command has a context which keeps required data.
            </summary>
        </member>
        <member name="P:Mahzen.Core.CommandContext.Current">
            <summary>
            Current command context.
            </summary>
        </member>
        <member name="F:Mahzen.Core.CommandContext.Parent">
            <summary>
            Parent command context
            </summary>
        </member>
        <member name="M:Mahzen.Core.CommandContext.#ctor(Mahzen.Core.Command,Mahzen.Core.MessageProtocolBuilder)">
            <summary>
            Creates a command context, and sets this as the current context in the execution context.
            </summary>
            <param name="command"></param>
            <param name="response"></param>
        </member>
        <member name="P:Mahzen.Core.CommandContext.Command">
            <summary>
            Current invoking command in the context
            </summary>
        </member>
        <member name="P:Mahzen.Core.CommandContext.Response">
            <summary>
            Response of the command.
            </summary>
        </member>
        <member name="M:Mahzen.Core.CommandContext.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Mahzen.Core.CommandContext.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mahzen.Core.CommandDispatcher">
            <summary>
            Keeps and registers command invokers, gets commands over a stream, and dispatches the commands to the related invoker.
            </summary>
        </member>
        <member name="P:Mahzen.Core.CommandDispatcher.Current">
            <summary>
            Gets current dispatcher in the execution context.
            </summary>
        </member>
        <member name="M:Mahzen.Core.CommandDispatcher.RegisterInvoker(Mahzen.Core.ICommandInvoker[])">
            <summary>
            Registers command invokers.
            </summary>
            <param name="invokers"></param>
        </member>
        <member name="M:Mahzen.Core.CommandDispatcher.GetInvokers">
            <summary>
            Gets the registered invokers. It will use a read lock, so use wisely.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Mahzen.Core.CommandDispatcher.Stream">
            <summary>
            Associated stream which keeps the unparsed commands.
            </summary>
        </member>
        <member name="F:Mahzen.Core.CommandDispatcher.CancelToken">
            <summary>
            Cancellation Token 
            </summary>
        </member>
        <member name="F:Mahzen.Core.CommandDispatcher.Response">
            <summary>
            Response stream.
            </summary>
        </member>
        <member name="F:Mahzen.Core.CommandDispatcher.ParentDispatcher">
            <summary>
            The parent dispatcher if there is any.
            </summary>
        </member>
        <member name="M:Mahzen.Core.CommandDispatcher.#ctor(System.IO.Stream,System.Threading.CancellationToken@)">
            <summary>
            Creates a command dispatcher. Dont forget to dispose it.
            </summary>
            <param name="stream"></param>
            <param name="cancelToken"></param>
        </member>
        <member name="M:Mahzen.Core.CommandDispatcher.HandleAsync">
            <summary>
            Gets command requests from the stream, and dispatches the commands to the registered invokers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mahzen.Core.CommandDispatcher.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Mahzen.Core.CommandDispatcher.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mahzen.Core.Error">
            <summary>
            Base Error class
            </summary>
        </member>
        <member name="P:Mahzen.Core.Error.Code">
            <summary>
            Every error has a unique code, smaller than 8 byte, only ascii chars
            </summary>
        </member>
        <member name="P:Mahzen.Core.Error.Message">
            <summary>
            Formatted error message.
            </summary>
        </member>
        <member name="M:Mahzen.Core.Error.#ctor(System.String)">
            <summary>
            Base constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Mahzen.Core.ICommandInvoker">
            <summary>
            Responsible for invoking commands.
            </summary>
        </member>
        <member name="M:Mahzen.Core.ICommandInvoker.CanInvoke(Mahzen.Core.Command)">
            <summary>
            Checks if this invoker can invoke this command or not.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Mahzen.Core.ICommandInvoker.InvokeAsync(Mahzen.Core.Command)">
            <summary>
            Invokes the command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Mahzen.Core.IProtocolBuilder">
            <summary>
            Protocol Builder Interface
            </summary>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.Write(System.String)">
            <summary>
            Writes string value 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.Write(System.Int32)">
            <summary>
            Writes integer value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.Write(System.Double)">
            <summary>
            Writes double value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.Write(System.Int64)">
            <summary>
            Writes long value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.Write(System.Boolean)">
            <summary>
            Writes boolean value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.WriteError(Mahzen.Core.Error)">
            <summary>
            Writes an error.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.WriteError(System.String,System.String)">
            <summary>
            Writes an error.
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.WriteNull">
            <summary>
            Write null value
            </summary>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.Write(System.Action{Mahzen.Core.IProtocolBuilder}[])">
            <summary>
            Writes an array.
            </summary>
            <param name="arrayItemBuilders"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.Write(System.ValueTuple{System.Action{Mahzen.Core.IProtocolBuilder},System.Action{Mahzen.Core.IProtocolBuilder}}[])">
            <summary>
            Writes a map.
            </summary>
            <param name="mapItemBuilders"></param>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.BeginArray">
            <summary>
            Helper method to create an array by begin-end methods. Can be used with using.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mahzen.Core.IProtocolBuilder.BeginMap">
            <summary>
            Helper method to create a map by begin-end methods. Can be used with using.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mahzen.Core.ProtocolBuilder">
            <summary>
            Base protocol builder which implements basic implementations.
            </summary>
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.HandleWrite(Mahzen.Core.MessageProtocolObject)">
            <summary>
            Handles the writing of <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
            <param name="protocolObject"></param>
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.Write(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.Write(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.Write(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.Write(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.WriteError(Mahzen.Core.Error)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.WriteError(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.WriteNull">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.Write(System.Action{Mahzen.Core.IProtocolBuilder}[])">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.Write(System.ValueTuple{System.Action{Mahzen.Core.IProtocolBuilder},System.Action{Mahzen.Core.IProtocolBuilder}}[])">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.BeginArray">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ProtocolBuilder.BeginMap">
            <inheritdoc />
        </member>
        <member name="T:Mahzen.Core.MessageProtocolBuilder">
            <summary>
            The Protocol Builder that writes message protocols to an output stream.
            </summary>
        </member>
        <member name="M:Mahzen.Core.MessageProtocolBuilder.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="outputStream"></param>
        </member>
        <member name="M:Mahzen.Core.MessageProtocolBuilder.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Mahzen.Core.MessageProtocolBuilder.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mahzen.Core.MessageProtocolBuilder.HandleWrite(Mahzen.Core.MessageProtocolObject)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.MessageProtocolBuilder.FlushAsync">
            <summary>
            Write all internal buffer to the output stream, and clears the internal buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mahzen.Core.MessageProtocolBuilder.Flush">
            <summary>
            Write all internal buffer to the output stream, and clears the internal buffer.
            </summary>
        </member>
        <member name="T:Mahzen.Core.ArrayProtocolBuilder">
            <summary>
            Using for creating array protocol objects
            </summary>
        </member>
        <member name="M:Mahzen.Core.ArrayProtocolBuilder.GetItems">
            <summary>
            Gets the created items so far.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mahzen.Core.ArrayProtocolBuilder.HandleWrite(Mahzen.Core.MessageProtocolObject)">
            <inheritdoc />
        </member>
        <member name="M:Mahzen.Core.ArrayProtocolBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mahzen.Core.ArrayProtocolBuilder.#ctor(System.Action{System.Memory{Mahzen.Core.MessageProtocolObject}})">
            <summary>
            Using for begin-end method.
            </summary>
            <param name="endArrayAction"></param>
        </member>
        <member name="M:Mahzen.Core.ArrayProtocolBuilder.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Mahzen.Core.ArrayProtocolBuilder.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mahzen.Core.ArrayProtocolBuilder.EndArray">
            <summary>
            Ends the array if called with <see cref="M:Mahzen.Core.ProtocolBuilder.BeginArray"/>
            </summary>
        </member>
        <member name="T:Mahzen.Core.MapItemProtocolBuilder">
            <summary>
            Using for creating map protocol object items
            </summary>
        </member>
        <member name="P:Mahzen.Core.MapItemProtocolBuilder.ProtocolObject">
            <summary>
            Created map item
            </summary>
        </member>
        <member name="M:Mahzen.Core.MapItemProtocolBuilder.HandleWrite(Mahzen.Core.MessageProtocolObject)">
            <inheritdoc />
        </member>
        <member name="T:Mahzen.Core.MapProtocolBuilder">
            <summary>
            Using for creating map protocol objects by begin-end method.
            </summary>
        </member>
        <member name="M:Mahzen.Core.MapProtocolBuilder.#ctor(System.Action{System.Memory{System.Collections.Generic.KeyValuePair{Mahzen.Core.MessageProtocolObject,Mahzen.Core.MessageProtocolObject}}})">
            <summary>
            
            </summary>
            <param name="endMapAction"></param>
        </member>
        <member name="M:Mahzen.Core.MapProtocolBuilder.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Mahzen.Core.MapProtocolBuilder.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mahzen.Core.MapProtocolBuilder.GetItems">
            <summary>
            Gets the items that created so far.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mahzen.Core.MapProtocolBuilder.EndMap">
            <summary>
            Ends the map object
            </summary>
        </member>
        <member name="M:Mahzen.Core.MapProtocolBuilder.Write(System.Action{Mahzen.Core.IProtocolBuilder},System.Action{Mahzen.Core.IProtocolBuilder})">
            <summary>
            Writes key-value pair using protocol builders.
            </summary>
            <param name="keyBuilder"></param>
            <param name="valueBuilder"></param>
        </member>
        <member name="T:Mahzen.Core.MessageProtocolObject">
            <summary>
            Base Message Protocol Object
            </summary>
        </member>
        <member name="P:Mahzen.Core.MessageProtocolObject.TokenType">
            <summary>
            Every <see cref="T:Mahzen.Core.MessageProtocolObject"/> has a token type, also it represents its starter byte at the token.
            </summary>
        </member>
        <member name="T:Mahzen.Core.StringProtocolObject">
            <summary>
            Simple string <see cref="T:Mahzen.Core.MessageProtocolObject"/> that does not contains any <see cref="F:Mahzen.Core.TokenType.Separator"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.StringProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="P:Mahzen.Core.StringProtocolObject.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Mahzen.Core.BlobProtocolObject">
            <summary>
            Byte array <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.BlobProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="P:Mahzen.Core.BlobProtocolObject.Bytes">
            <summary>
            Bytes
            </summary>
        </member>
        <member name="T:Mahzen.Core.ErrorProtocolObject">
            <summary>
            Error <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.ErrorProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="P:Mahzen.Core.ErrorProtocolObject.Code">
            <summary>
            8 bytes, ascii, error code
            </summary>
        </member>
        <member name="P:Mahzen.Core.ErrorProtocolObject.Message">
            <summary>
            Utf8 encoded error message
            </summary>
        </member>
        <member name="T:Mahzen.Core.IntegerProtocolObject">
            <summary>
            32-bit signed integer <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.IntegerProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="P:Mahzen.Core.IntegerProtocolObject.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Mahzen.Core.LongProtocolObject">
            <summary>
            64-bit signed integer(long) <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.LongProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="P:Mahzen.Core.LongProtocolObject.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Mahzen.Core.DoubleProtocolObject">
            <summary>
            Double <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.DoubleProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="P:Mahzen.Core.DoubleProtocolObject.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Mahzen.Core.NullProtocolObject">
            <summary>
            Null <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.NullProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="T:Mahzen.Core.BooleanProtocolObject">
            <summary>
            Boolean <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.BooleanProtocolObject.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Mahzen.Core.BooleanProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="T:Mahzen.Core.ArrayProtocolObject">
            <summary>
            Array <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.ArrayProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="P:Mahzen.Core.ArrayProtocolObject.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="T:Mahzen.Core.MapProtocolObject">
            <summary>
            Map <see cref="T:Mahzen.Core.MessageProtocolObject"/>
            </summary>
        </member>
        <member name="P:Mahzen.Core.MapProtocolObject.TokenType">
            <inheritdoc />
        </member>
        <member name="P:Mahzen.Core.MapProtocolObject.Items">
            <summary>
            Key-Value pairs
            </summary>
        </member>
        <member name="T:Mahzen.Core.Parser">
            <summary>
            Message Protocol Parser
            </summary>
            <remarks>
            <![CDATA[
            Mahzen Message Protocol(MMP) Format
            
            This format is similar to RESP format,
            but I have changed some parts as a design decision
            
            MMP Types:
            - SimpleString:  $<utf8_bytes_without_'\n'>\n
            - Blob:          B<length>\n<bytes>\n
            - Errors:        !<length>\n<error_code>\n<error_message_utf8_string>\n
            - Integer:       I<integer_4_bytes>\n
            - Long:          L<long_8_bytes>\n
            - Double:        D<double_8_bytes>\n
            - Null:          N\n
            - Boolean:       0\n or 1\n
            - Array:         *<count>\n<items>        =>items can be any type
            - Map:           %<count>\n<key><value>   =>key and values can be any type
            
            length: int, 4 bytes
            error_code: ascii string, 8 bytes
            count: int, 4 bytes
            ]]>
            </remarks>
        </member>
        <member name="M:Mahzen.Core.Parser.#ctor(System.Span{System.Byte},System.Memory{Mahzen.Core.MessageProtocolObject},System.Action)">
            <summary>
            Creates Parser
            </summary>
            <param name="buffer">The buffer to parse</param>
            <param name="result">The fixed sized result buffer to fill with parsing result</param>
            <param name="resizeResult">If the result buffer is full, then this action will be called. If it is null, then throws an exception when the buffer is full</param>
        </member>
        <member name="M:Mahzen.Core.Parser.Parse">
            <summary>
            Parse the remaning buffer.
            </summary>
        </member>
        <member name="P:Mahzen.Core.Parser.RemainingBuffer">
            <summary>
            Remaining buffer after the parse method.
            </summary>
        </member>
        <member name="P:Mahzen.Core.Parser.ResultIndex">
            <summary>
            The pointer at the result buffer that indicates empty items to fill with the parsing results.
            </summary>
        </member>
        <member name="M:Mahzen.Core.Parser.SlideBuffer(System.Span{System.Byte})">
            <summary>
            Appends a new buffer to the main buffer, resets the current position.
            </summary>
            <param name="nextBuffer"></param>
        </member>
        <member name="T:Mahzen.Core.TokenType">
            <summary>
            Every protocol object type starts with a unique byte that represents its token.
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Separator">
            <summary>
            Default separator used in the Message Protocol
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.String">
            <summary>
            Simple strings that does not contains any <see cref="F:Mahzen.Core.TokenType.Separator"/> token.
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Blob">
            <summary>
            Blob of a byte array
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Integer">
            <summary>
            32-bit signed int
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Long">
            <summary>
            64-bit signed int
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.False">
            <summary>
            Boolean False
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.True">
            <summary>
            Boolean True
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="F:Mahzen.Core.TokenType.Map">
            <summary>
            Map
            </summary>
        </member>
    </members>
</doc>
